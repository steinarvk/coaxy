package coaxyexpr

// Code generated by peg lib/coaxyexpr/grammar.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleExpr
	ruleExprElement
	rulePath
	ruleFilter
	ruleFilterCore
	ruleRoot
	rulePathComponent
	ruleRootField
	ruleRootIndex
	ruleBracketedRootIndex
	ruleBracketedRootField
	ruleFieldAccess
	ruleBracketedFieldAccess
	ruleBracketedIndexAccess
	ruleIndexAccess
	ruleDOT
	ruleLBRACKET
	ruleRBRACKET
	rulePIPE
	ruleCOLON
	ruleDQUOTE
	ruleBACKSLASH
	ruleStringLiteral
	ruleStringChar
	ruleEscape
	ruleInteger
	ruleIdentifier
	ruleIdentifierInitialChar
	ruleIdentifierContinuedChar
	ruleWhitespace
	ruleEND
	ruleAction0
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	rulePegText
	ruleAction9
	ruleAction10
	ruleAction11
)

var rul3s = [...]string{
	"Unknown",
	"Expr",
	"ExprElement",
	"Path",
	"Filter",
	"FilterCore",
	"Root",
	"PathComponent",
	"RootField",
	"RootIndex",
	"BracketedRootIndex",
	"BracketedRootField",
	"FieldAccess",
	"BracketedFieldAccess",
	"BracketedIndexAccess",
	"IndexAccess",
	"DOT",
	"LBRACKET",
	"RBRACKET",
	"PIPE",
	"COLON",
	"DQUOTE",
	"BACKSLASH",
	"StringLiteral",
	"StringChar",
	"Escape",
	"Integer",
	"Identifier",
	"IdentifierInitialChar",
	"IdentifierContinuedChar",
	"Whitespace",
	"END",
	"Action0",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"PegText",
	"Action9",
	"Action10",
	"Action11",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type parser struct {
	expression    expression
	identifier    string
	stringLiteral string
	integer       int

	Buffer string
	buffer []rune
	rules  [45]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *parser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *parser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *parser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *parser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *parser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *parser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *parser) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:

			p.expression.addFilter(p.identifier)

		case ruleAction1:

			p.expression.addKey(p.identifier)

		case ruleAction2:

			p.expression.addIndex(p.integer)

		case ruleAction3:

			p.expression.addIndex(p.integer)

		case ruleAction4:

			p.expression.addKey(p.stringLiteral)

		case ruleAction5:

			p.expression.addKey(p.identifier)

		case ruleAction6:

			p.expression.addKey(p.stringLiteral)

		case ruleAction7:

			p.expression.addIndex(p.integer)

		case ruleAction8:

			p.expression.addIndex(p.integer)

		case ruleAction9:

			s, _ := strconv.Unquote(text)
			p.stringLiteral = s

		case ruleAction10:

			n, _ := strconv.Atoi(text)
			p.integer = n

		case ruleAction11:

			p.identifier = text

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*parser) error {
	return func(p *parser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*parser) error {
	return func(p *parser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *parser) Init(options ...func(*parser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Expr <- <(Path (Whitespace? PIPE Whitespace? ExprElement)* END)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[rulePath]() {
					goto l0
				}
			l2:
				{
					position3, tokenIndex3 := position, tokenIndex
					{
						position4, tokenIndex4 := position, tokenIndex
						if !_rules[ruleWhitespace]() {
							goto l4
						}
						goto l5
					l4:
						position, tokenIndex = position4, tokenIndex4
					}
				l5:
					if !_rules[rulePIPE]() {
						goto l3
					}
					{
						position6, tokenIndex6 := position, tokenIndex
						if !_rules[ruleWhitespace]() {
							goto l6
						}
						goto l7
					l6:
						position, tokenIndex = position6, tokenIndex6
					}
				l7:
					if !_rules[ruleExprElement]() {
						goto l3
					}
					goto l2
				l3:
					position, tokenIndex = position3, tokenIndex3
				}
				if !_rules[ruleEND]() {
					goto l0
				}
				add(ruleExpr, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 ExprElement <- <(Path / Filter)> */
		func() bool {
			position8, tokenIndex8 := position, tokenIndex
			{
				position9 := position
				{
					position10, tokenIndex10 := position, tokenIndex
					if !_rules[rulePath]() {
						goto l11
					}
					goto l10
				l11:
					position, tokenIndex = position10, tokenIndex10
					if !_rules[ruleFilter]() {
						goto l8
					}
				}
			l10:
				add(ruleExprElement, position9)
			}
			return true
		l8:
			position, tokenIndex = position8, tokenIndex8
			return false
		},
		/* 2 Path <- <(Root PathComponent*)> */
		func() bool {
			position12, tokenIndex12 := position, tokenIndex
			{
				position13 := position
				if !_rules[ruleRoot]() {
					goto l12
				}
			l14:
				{
					position15, tokenIndex15 := position, tokenIndex
					if !_rules[rulePathComponent]() {
						goto l15
					}
					goto l14
				l15:
					position, tokenIndex = position15, tokenIndex15
				}
				add(rulePath, position13)
			}
			return true
		l12:
			position, tokenIndex = position12, tokenIndex12
			return false
		},
		/* 3 Filter <- <(COLON FilterCore)> */
		func() bool {
			position16, tokenIndex16 := position, tokenIndex
			{
				position17 := position
				if !_rules[ruleCOLON]() {
					goto l16
				}
				if !_rules[ruleFilterCore]() {
					goto l16
				}
				add(ruleFilter, position17)
			}
			return true
		l16:
			position, tokenIndex = position16, tokenIndex16
			return false
		},
		/* 4 FilterCore <- <(Identifier Action0)> */
		func() bool {
			position18, tokenIndex18 := position, tokenIndex
			{
				position19 := position
				if !_rules[ruleIdentifier]() {
					goto l18
				}
				if !_rules[ruleAction0]() {
					goto l18
				}
				add(ruleFilterCore, position19)
			}
			return true
		l18:
			position, tokenIndex = position18, tokenIndex18
			return false
		},
		/* 5 Root <- <(RootField / RootIndex / BracketedRootIndex / BracketedRootField)> */
		func() bool {
			position20, tokenIndex20 := position, tokenIndex
			{
				position21 := position
				{
					position22, tokenIndex22 := position, tokenIndex
					if !_rules[ruleRootField]() {
						goto l23
					}
					goto l22
				l23:
					position, tokenIndex = position22, tokenIndex22
					if !_rules[ruleRootIndex]() {
						goto l24
					}
					goto l22
				l24:
					position, tokenIndex = position22, tokenIndex22
					if !_rules[ruleBracketedRootIndex]() {
						goto l25
					}
					goto l22
				l25:
					position, tokenIndex = position22, tokenIndex22
					if !_rules[ruleBracketedRootField]() {
						goto l20
					}
				}
			l22:
				add(ruleRoot, position21)
			}
			return true
		l20:
			position, tokenIndex = position20, tokenIndex20
			return false
		},
		/* 6 PathComponent <- <(FieldAccess / IndexAccess / BracketedFieldAccess / BracketedIndexAccess)> */
		func() bool {
			position26, tokenIndex26 := position, tokenIndex
			{
				position27 := position
				{
					position28, tokenIndex28 := position, tokenIndex
					if !_rules[ruleFieldAccess]() {
						goto l29
					}
					goto l28
				l29:
					position, tokenIndex = position28, tokenIndex28
					if !_rules[ruleIndexAccess]() {
						goto l30
					}
					goto l28
				l30:
					position, tokenIndex = position28, tokenIndex28
					if !_rules[ruleBracketedFieldAccess]() {
						goto l31
					}
					goto l28
				l31:
					position, tokenIndex = position28, tokenIndex28
					if !_rules[ruleBracketedIndexAccess]() {
						goto l26
					}
				}
			l28:
				add(rulePathComponent, position27)
			}
			return true
		l26:
			position, tokenIndex = position26, tokenIndex26
			return false
		},
		/* 7 RootField <- <(Identifier Action1)> */
		func() bool {
			position32, tokenIndex32 := position, tokenIndex
			{
				position33 := position
				if !_rules[ruleIdentifier]() {
					goto l32
				}
				if !_rules[ruleAction1]() {
					goto l32
				}
				add(ruleRootField, position33)
			}
			return true
		l32:
			position, tokenIndex = position32, tokenIndex32
			return false
		},
		/* 8 RootIndex <- <(Integer Action2)> */
		func() bool {
			position34, tokenIndex34 := position, tokenIndex
			{
				position35 := position
				if !_rules[ruleInteger]() {
					goto l34
				}
				if !_rules[ruleAction2]() {
					goto l34
				}
				add(ruleRootIndex, position35)
			}
			return true
		l34:
			position, tokenIndex = position34, tokenIndex34
			return false
		},
		/* 9 BracketedRootIndex <- <(LBRACKET Integer RBRACKET Action3)> */
		func() bool {
			position36, tokenIndex36 := position, tokenIndex
			{
				position37 := position
				if !_rules[ruleLBRACKET]() {
					goto l36
				}
				if !_rules[ruleInteger]() {
					goto l36
				}
				if !_rules[ruleRBRACKET]() {
					goto l36
				}
				if !_rules[ruleAction3]() {
					goto l36
				}
				add(ruleBracketedRootIndex, position37)
			}
			return true
		l36:
			position, tokenIndex = position36, tokenIndex36
			return false
		},
		/* 10 BracketedRootField <- <(LBRACKET StringLiteral RBRACKET Action4)> */
		func() bool {
			position38, tokenIndex38 := position, tokenIndex
			{
				position39 := position
				if !_rules[ruleLBRACKET]() {
					goto l38
				}
				if !_rules[ruleStringLiteral]() {
					goto l38
				}
				if !_rules[ruleRBRACKET]() {
					goto l38
				}
				if !_rules[ruleAction4]() {
					goto l38
				}
				add(ruleBracketedRootField, position39)
			}
			return true
		l38:
			position, tokenIndex = position38, tokenIndex38
			return false
		},
		/* 11 FieldAccess <- <(DOT Identifier Action5)> */
		func() bool {
			position40, tokenIndex40 := position, tokenIndex
			{
				position41 := position
				if !_rules[ruleDOT]() {
					goto l40
				}
				if !_rules[ruleIdentifier]() {
					goto l40
				}
				if !_rules[ruleAction5]() {
					goto l40
				}
				add(ruleFieldAccess, position41)
			}
			return true
		l40:
			position, tokenIndex = position40, tokenIndex40
			return false
		},
		/* 12 BracketedFieldAccess <- <(LBRACKET StringLiteral RBRACKET Action6)> */
		func() bool {
			position42, tokenIndex42 := position, tokenIndex
			{
				position43 := position
				if !_rules[ruleLBRACKET]() {
					goto l42
				}
				if !_rules[ruleStringLiteral]() {
					goto l42
				}
				if !_rules[ruleRBRACKET]() {
					goto l42
				}
				if !_rules[ruleAction6]() {
					goto l42
				}
				add(ruleBracketedFieldAccess, position43)
			}
			return true
		l42:
			position, tokenIndex = position42, tokenIndex42
			return false
		},
		/* 13 BracketedIndexAccess <- <(LBRACKET Integer RBRACKET Action7)> */
		func() bool {
			position44, tokenIndex44 := position, tokenIndex
			{
				position45 := position
				if !_rules[ruleLBRACKET]() {
					goto l44
				}
				if !_rules[ruleInteger]() {
					goto l44
				}
				if !_rules[ruleRBRACKET]() {
					goto l44
				}
				if !_rules[ruleAction7]() {
					goto l44
				}
				add(ruleBracketedIndexAccess, position45)
			}
			return true
		l44:
			position, tokenIndex = position44, tokenIndex44
			return false
		},
		/* 14 IndexAccess <- <(DOT Integer Action8)> */
		func() bool {
			position46, tokenIndex46 := position, tokenIndex
			{
				position47 := position
				if !_rules[ruleDOT]() {
					goto l46
				}
				if !_rules[ruleInteger]() {
					goto l46
				}
				if !_rules[ruleAction8]() {
					goto l46
				}
				add(ruleIndexAccess, position47)
			}
			return true
		l46:
			position, tokenIndex = position46, tokenIndex46
			return false
		},
		/* 15 DOT <- <'.'> */
		func() bool {
			position48, tokenIndex48 := position, tokenIndex
			{
				position49 := position
				if buffer[position] != rune('.') {
					goto l48
				}
				position++
				add(ruleDOT, position49)
			}
			return true
		l48:
			position, tokenIndex = position48, tokenIndex48
			return false
		},
		/* 16 LBRACKET <- <'['> */
		func() bool {
			position50, tokenIndex50 := position, tokenIndex
			{
				position51 := position
				if buffer[position] != rune('[') {
					goto l50
				}
				position++
				add(ruleLBRACKET, position51)
			}
			return true
		l50:
			position, tokenIndex = position50, tokenIndex50
			return false
		},
		/* 17 RBRACKET <- <']'> */
		func() bool {
			position52, tokenIndex52 := position, tokenIndex
			{
				position53 := position
				if buffer[position] != rune(']') {
					goto l52
				}
				position++
				add(ruleRBRACKET, position53)
			}
			return true
		l52:
			position, tokenIndex = position52, tokenIndex52
			return false
		},
		/* 18 PIPE <- <'|'> */
		func() bool {
			position54, tokenIndex54 := position, tokenIndex
			{
				position55 := position
				if buffer[position] != rune('|') {
					goto l54
				}
				position++
				add(rulePIPE, position55)
			}
			return true
		l54:
			position, tokenIndex = position54, tokenIndex54
			return false
		},
		/* 19 COLON <- <':'> */
		func() bool {
			position56, tokenIndex56 := position, tokenIndex
			{
				position57 := position
				if buffer[position] != rune(':') {
					goto l56
				}
				position++
				add(ruleCOLON, position57)
			}
			return true
		l56:
			position, tokenIndex = position56, tokenIndex56
			return false
		},
		/* 20 DQUOTE <- <'"'> */
		func() bool {
			position58, tokenIndex58 := position, tokenIndex
			{
				position59 := position
				if buffer[position] != rune('"') {
					goto l58
				}
				position++
				add(ruleDQUOTE, position59)
			}
			return true
		l58:
			position, tokenIndex = position58, tokenIndex58
			return false
		},
		/* 21 BACKSLASH <- <'\\'> */
		func() bool {
			position60, tokenIndex60 := position, tokenIndex
			{
				position61 := position
				if buffer[position] != rune('\\') {
					goto l60
				}
				position++
				add(ruleBACKSLASH, position61)
			}
			return true
		l60:
			position, tokenIndex = position60, tokenIndex60
			return false
		},
		/* 22 StringLiteral <- <(<(DQUOTE StringChar* DQUOTE)> Action9)> */
		func() bool {
			position62, tokenIndex62 := position, tokenIndex
			{
				position63 := position
				{
					position64 := position
					if !_rules[ruleDQUOTE]() {
						goto l62
					}
				l65:
					{
						position66, tokenIndex66 := position, tokenIndex
						if !_rules[ruleStringChar]() {
							goto l66
						}
						goto l65
					l66:
						position, tokenIndex = position66, tokenIndex66
					}
					if !_rules[ruleDQUOTE]() {
						goto l62
					}
					add(rulePegText, position64)
				}
				if !_rules[ruleAction9]() {
					goto l62
				}
				add(ruleStringLiteral, position63)
			}
			return true
		l62:
			position, tokenIndex = position62, tokenIndex62
			return false
		},
		/* 23 StringChar <- <(Escape / (!('"' / '\n' / '\\') .))> */
		func() bool {
			position67, tokenIndex67 := position, tokenIndex
			{
				position68 := position
				{
					position69, tokenIndex69 := position, tokenIndex
					if !_rules[ruleEscape]() {
						goto l70
					}
					goto l69
				l70:
					position, tokenIndex = position69, tokenIndex69
					{
						position71, tokenIndex71 := position, tokenIndex
						{
							position72, tokenIndex72 := position, tokenIndex
							if buffer[position] != rune('"') {
								goto l73
							}
							position++
							goto l72
						l73:
							position, tokenIndex = position72, tokenIndex72
							if buffer[position] != rune('\n') {
								goto l74
							}
							position++
							goto l72
						l74:
							position, tokenIndex = position72, tokenIndex72
							if buffer[position] != rune('\\') {
								goto l71
							}
							position++
						}
					l72:
						goto l67
					l71:
						position, tokenIndex = position71, tokenIndex71
					}
					if !matchDot() {
						goto l67
					}
				}
			l69:
				add(ruleStringChar, position68)
			}
			return true
		l67:
			position, tokenIndex = position67, tokenIndex67
			return false
		},
		/* 24 Escape <- <(BACKSLASH ('"' / '\n' / '\\'))> */
		func() bool {
			position75, tokenIndex75 := position, tokenIndex
			{
				position76 := position
				if !_rules[ruleBACKSLASH]() {
					goto l75
				}
				{
					position77, tokenIndex77 := position, tokenIndex
					if buffer[position] != rune('"') {
						goto l78
					}
					position++
					goto l77
				l78:
					position, tokenIndex = position77, tokenIndex77
					if buffer[position] != rune('\n') {
						goto l79
					}
					position++
					goto l77
				l79:
					position, tokenIndex = position77, tokenIndex77
					if buffer[position] != rune('\\') {
						goto l75
					}
					position++
				}
			l77:
				add(ruleEscape, position76)
			}
			return true
		l75:
			position, tokenIndex = position75, tokenIndex75
			return false
		},
		/* 25 Integer <- <(<('0' / ([1-9] [0-9]*))> Action10)> */
		func() bool {
			position80, tokenIndex80 := position, tokenIndex
			{
				position81 := position
				{
					position82 := position
					{
						position83, tokenIndex83 := position, tokenIndex
						if buffer[position] != rune('0') {
							goto l84
						}
						position++
						goto l83
					l84:
						position, tokenIndex = position83, tokenIndex83
						if c := buffer[position]; c < rune('1') || c > rune('9') {
							goto l80
						}
						position++
					l85:
						{
							position86, tokenIndex86 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l86
							}
							position++
							goto l85
						l86:
							position, tokenIndex = position86, tokenIndex86
						}
					}
				l83:
					add(rulePegText, position82)
				}
				if !_rules[ruleAction10]() {
					goto l80
				}
				add(ruleInteger, position81)
			}
			return true
		l80:
			position, tokenIndex = position80, tokenIndex80
			return false
		},
		/* 26 Identifier <- <(<(IdentifierInitialChar IdentifierContinuedChar*)> Action11)> */
		func() bool {
			position87, tokenIndex87 := position, tokenIndex
			{
				position88 := position
				{
					position89 := position
					if !_rules[ruleIdentifierInitialChar]() {
						goto l87
					}
				l90:
					{
						position91, tokenIndex91 := position, tokenIndex
						if !_rules[ruleIdentifierContinuedChar]() {
							goto l91
						}
						goto l90
					l91:
						position, tokenIndex = position91, tokenIndex91
					}
					add(rulePegText, position89)
				}
				if !_rules[ruleAction11]() {
					goto l87
				}
				add(ruleIdentifier, position88)
			}
			return true
		l87:
			position, tokenIndex = position87, tokenIndex87
			return false
		},
		/* 27 IdentifierInitialChar <- <([a-z] / [A-Z])> */
		func() bool {
			position92, tokenIndex92 := position, tokenIndex
			{
				position93 := position
				{
					position94, tokenIndex94 := position, tokenIndex
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l95
					}
					position++
					goto l94
				l95:
					position, tokenIndex = position94, tokenIndex94
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l92
					}
					position++
				}
			l94:
				add(ruleIdentifierInitialChar, position93)
			}
			return true
		l92:
			position, tokenIndex = position92, tokenIndex92
			return false
		},
		/* 28 IdentifierContinuedChar <- <([a-z] / [A-Z] / '_' / [0-9])> */
		func() bool {
			position96, tokenIndex96 := position, tokenIndex
			{
				position97 := position
				{
					position98, tokenIndex98 := position, tokenIndex
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l99
					}
					position++
					goto l98
				l99:
					position, tokenIndex = position98, tokenIndex98
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l100
					}
					position++
					goto l98
				l100:
					position, tokenIndex = position98, tokenIndex98
					if buffer[position] != rune('_') {
						goto l101
					}
					position++
					goto l98
				l101:
					position, tokenIndex = position98, tokenIndex98
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l96
					}
					position++
				}
			l98:
				add(ruleIdentifierContinuedChar, position97)
			}
			return true
		l96:
			position, tokenIndex = position96, tokenIndex96
			return false
		},
		/* 29 Whitespace <- <('\t' / ' ')+> */
		func() bool {
			position102, tokenIndex102 := position, tokenIndex
			{
				position103 := position
				{
					position106, tokenIndex106 := position, tokenIndex
					if buffer[position] != rune('\t') {
						goto l107
					}
					position++
					goto l106
				l107:
					position, tokenIndex = position106, tokenIndex106
					if buffer[position] != rune(' ') {
						goto l102
					}
					position++
				}
			l106:
			l104:
				{
					position105, tokenIndex105 := position, tokenIndex
					{
						position108, tokenIndex108 := position, tokenIndex
						if buffer[position] != rune('\t') {
							goto l109
						}
						position++
						goto l108
					l109:
						position, tokenIndex = position108, tokenIndex108
						if buffer[position] != rune(' ') {
							goto l105
						}
						position++
					}
				l108:
					goto l104
				l105:
					position, tokenIndex = position105, tokenIndex105
				}
				add(ruleWhitespace, position103)
			}
			return true
		l102:
			position, tokenIndex = position102, tokenIndex102
			return false
		},
		/* 30 END <- <!.> */
		func() bool {
			position110, tokenIndex110 := position, tokenIndex
			{
				position111 := position
				{
					position112, tokenIndex112 := position, tokenIndex
					if !matchDot() {
						goto l112
					}
					goto l110
				l112:
					position, tokenIndex = position112, tokenIndex112
				}
				add(ruleEND, position111)
			}
			return true
		l110:
			position, tokenIndex = position110, tokenIndex110
			return false
		},
		/* 32 Action0 <- <{
		  p.expression.addFilter(p.identifier)
		}> */
		func() bool {
			{
				add(ruleAction0, position)
			}
			return true
		},
		/* 33 Action1 <- <{
		  p.expression.addKey(p.identifier)
		}> */
		func() bool {
			{
				add(ruleAction1, position)
			}
			return true
		},
		/* 34 Action2 <- <{
		  p.expression.addIndex(p.integer)
		}> */
		func() bool {
			{
				add(ruleAction2, position)
			}
			return true
		},
		/* 35 Action3 <- <{
		  p.expression.addIndex(p.integer)
		}> */
		func() bool {
			{
				add(ruleAction3, position)
			}
			return true
		},
		/* 36 Action4 <- <{
		  p.expression.addKey(p.stringLiteral)
		}> */
		func() bool {
			{
				add(ruleAction4, position)
			}
			return true
		},
		/* 37 Action5 <- <{
		  p.expression.addKey(p.identifier)
		}> */
		func() bool {
			{
				add(ruleAction5, position)
			}
			return true
		},
		/* 38 Action6 <- <{
		  p.expression.addKey(p.stringLiteral)
		}> */
		func() bool {
			{
				add(ruleAction6, position)
			}
			return true
		},
		/* 39 Action7 <- <{
		  p.expression.addIndex(p.integer)
		}> */
		func() bool {
			{
				add(ruleAction7, position)
			}
			return true
		},
		/* 40 Action8 <- <{
		  p.expression.addIndex(p.integer)
		}> */
		func() bool {
			{
				add(ruleAction8, position)
			}
			return true
		},
		nil,
		/* 42 Action9 <- <{
		  s, _ := strconv.Unquote(text)
		  p.stringLiteral = s
		}> */
		func() bool {
			{
				add(ruleAction9, position)
			}
			return true
		},
		/* 43 Action10 <- <{
		  n, _ := strconv.Atoi(text)
		  p.integer = n
		}> */
		func() bool {
			{
				add(ruleAction10, position)
			}
			return true
		},
		/* 44 Action11 <- <{
		  p.identifier = text
		}> */
		func() bool {
			{
				add(ruleAction11, position)
			}
			return true
		},
	}
	p.rules = _rules
	return nil
}
