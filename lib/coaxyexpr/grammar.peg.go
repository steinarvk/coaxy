package coaxyexpr

// Code generated by peg lib/coaxyexpr/grammar.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleExpr
	ruleUnfilteredExpr
	ruleFilteredExpr
	ruleFilter
	ruleFilterCore
	ruleRoot
	rulePathComponent
	ruleRootField
	ruleRootIndex
	ruleBracketedRootIndex
	ruleBracketedRootField
	ruleFieldAccess
	ruleBracketedFieldAccess
	ruleBracketedIndexAccess
	ruleIndexAccess
	ruleDOT
	ruleLBRACKET
	ruleRBRACKET
	ruleDOLLAR
	rulePIPE
	ruleCOMMA
	ruleDQUOTE
	ruleBACKSLASH
	ruleStringLiteral
	ruleStringChar
	ruleEscape
	ruleInteger
	ruleIdentifier
	ruleIdentifierInitialChar
	ruleIdentifierContinuedChar
	ruleWhitespace
	ruleEND
	ruleAction0
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	rulePegText
	ruleAction8
	ruleAction9
	ruleAction10
)

var rul3s = [...]string{
	"Unknown",
	"Expr",
	"UnfilteredExpr",
	"FilteredExpr",
	"Filter",
	"FilterCore",
	"Root",
	"PathComponent",
	"RootField",
	"RootIndex",
	"BracketedRootIndex",
	"BracketedRootField",
	"FieldAccess",
	"BracketedFieldAccess",
	"BracketedIndexAccess",
	"IndexAccess",
	"DOT",
	"LBRACKET",
	"RBRACKET",
	"DOLLAR",
	"PIPE",
	"COMMA",
	"DQUOTE",
	"BACKSLASH",
	"StringLiteral",
	"StringChar",
	"Escape",
	"Integer",
	"Identifier",
	"IdentifierInitialChar",
	"IdentifierContinuedChar",
	"Whitespace",
	"END",
	"Action0",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"PegText",
	"Action8",
	"Action9",
	"Action10",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type parser struct {
	expression    expression
	identifier    string
	stringLiteral string
	integer       int

	Buffer string
	buffer []rune
	rules  [45]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *parser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *parser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *parser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *parser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *parser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *parser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *parser) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:

			p.expression.addKey(p.identifier)

		case ruleAction1:

			p.expression.addIndex(p.integer)

		case ruleAction2:

			p.expression.addIndex(p.integer)

		case ruleAction3:

			p.expression.addKey(p.stringLiteral)

		case ruleAction4:

			p.expression.addKey(p.identifier)

		case ruleAction5:

			p.expression.addKey(p.stringLiteral)

		case ruleAction6:

			p.expression.addIndex(p.integer)

		case ruleAction7:

			p.expression.addIndex(p.integer)

		case ruleAction8:

			s, _ := strconv.Unquote(text)
			p.stringLiteral = s

		case ruleAction9:

			n, _ := strconv.Atoi(text)
			p.integer = n

		case ruleAction10:

			p.identifier = text

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*parser) error {
	return func(p *parser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*parser) error {
	return func(p *parser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *parser) Init(options ...func(*parser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Expr <- <(FilteredExpr (Whitespace? COMMA Whitespace? FilteredExpr)* END)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[ruleFilteredExpr]() {
					goto l0
				}
			l2:
				{
					position3, tokenIndex3 := position, tokenIndex
					{
						position4, tokenIndex4 := position, tokenIndex
						if !_rules[ruleWhitespace]() {
							goto l4
						}
						goto l5
					l4:
						position, tokenIndex = position4, tokenIndex4
					}
				l5:
					if !_rules[ruleCOMMA]() {
						goto l3
					}
					{
						position6, tokenIndex6 := position, tokenIndex
						if !_rules[ruleWhitespace]() {
							goto l6
						}
						goto l7
					l6:
						position, tokenIndex = position6, tokenIndex6
					}
				l7:
					if !_rules[ruleFilteredExpr]() {
						goto l3
					}
					goto l2
				l3:
					position, tokenIndex = position3, tokenIndex3
				}
				if !_rules[ruleEND]() {
					goto l0
				}
				add(ruleExpr, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 UnfilteredExpr <- <(Root PathComponent*)> */
		func() bool {
			position8, tokenIndex8 := position, tokenIndex
			{
				position9 := position
				if !_rules[ruleRoot]() {
					goto l8
				}
			l10:
				{
					position11, tokenIndex11 := position, tokenIndex
					if !_rules[rulePathComponent]() {
						goto l11
					}
					goto l10
				l11:
					position, tokenIndex = position11, tokenIndex11
				}
				add(ruleUnfilteredExpr, position9)
			}
			return true
		l8:
			position, tokenIndex = position8, tokenIndex8
			return false
		},
		/* 2 FilteredExpr <- <(UnfilteredExpr Filter*)> */
		func() bool {
			position12, tokenIndex12 := position, tokenIndex
			{
				position13 := position
				if !_rules[ruleUnfilteredExpr]() {
					goto l12
				}
			l14:
				{
					position15, tokenIndex15 := position, tokenIndex
					if !_rules[ruleFilter]() {
						goto l15
					}
					goto l14
				l15:
					position, tokenIndex = position15, tokenIndex15
				}
				add(ruleFilteredExpr, position13)
			}
			return true
		l12:
			position, tokenIndex = position12, tokenIndex12
			return false
		},
		/* 3 Filter <- <(Whitespace? PIPE Whitespace? FilterCore)> */
		func() bool {
			position16, tokenIndex16 := position, tokenIndex
			{
				position17 := position
				{
					position18, tokenIndex18 := position, tokenIndex
					if !_rules[ruleWhitespace]() {
						goto l18
					}
					goto l19
				l18:
					position, tokenIndex = position18, tokenIndex18
				}
			l19:
				if !_rules[rulePIPE]() {
					goto l16
				}
				{
					position20, tokenIndex20 := position, tokenIndex
					if !_rules[ruleWhitespace]() {
						goto l20
					}
					goto l21
				l20:
					position, tokenIndex = position20, tokenIndex20
				}
			l21:
				if !_rules[ruleFilterCore]() {
					goto l16
				}
				add(ruleFilter, position17)
			}
			return true
		l16:
			position, tokenIndex = position16, tokenIndex16
			return false
		},
		/* 4 FilterCore <- <Identifier> */
		func() bool {
			position22, tokenIndex22 := position, tokenIndex
			{
				position23 := position
				if !_rules[ruleIdentifier]() {
					goto l22
				}
				add(ruleFilterCore, position23)
			}
			return true
		l22:
			position, tokenIndex = position22, tokenIndex22
			return false
		},
		/* 5 Root <- <(RootField / RootIndex / BracketedRootIndex / BracketedRootField)> */
		func() bool {
			position24, tokenIndex24 := position, tokenIndex
			{
				position25 := position
				{
					position26, tokenIndex26 := position, tokenIndex
					if !_rules[ruleRootField]() {
						goto l27
					}
					goto l26
				l27:
					position, tokenIndex = position26, tokenIndex26
					if !_rules[ruleRootIndex]() {
						goto l28
					}
					goto l26
				l28:
					position, tokenIndex = position26, tokenIndex26
					if !_rules[ruleBracketedRootIndex]() {
						goto l29
					}
					goto l26
				l29:
					position, tokenIndex = position26, tokenIndex26
					if !_rules[ruleBracketedRootField]() {
						goto l24
					}
				}
			l26:
				add(ruleRoot, position25)
			}
			return true
		l24:
			position, tokenIndex = position24, tokenIndex24
			return false
		},
		/* 6 PathComponent <- <(FieldAccess / IndexAccess / BracketedFieldAccess / BracketedIndexAccess)> */
		func() bool {
			position30, tokenIndex30 := position, tokenIndex
			{
				position31 := position
				{
					position32, tokenIndex32 := position, tokenIndex
					if !_rules[ruleFieldAccess]() {
						goto l33
					}
					goto l32
				l33:
					position, tokenIndex = position32, tokenIndex32
					if !_rules[ruleIndexAccess]() {
						goto l34
					}
					goto l32
				l34:
					position, tokenIndex = position32, tokenIndex32
					if !_rules[ruleBracketedFieldAccess]() {
						goto l35
					}
					goto l32
				l35:
					position, tokenIndex = position32, tokenIndex32
					if !_rules[ruleBracketedIndexAccess]() {
						goto l30
					}
				}
			l32:
				add(rulePathComponent, position31)
			}
			return true
		l30:
			position, tokenIndex = position30, tokenIndex30
			return false
		},
		/* 7 RootField <- <((DOLLAR DOT)? Identifier Action0)> */
		func() bool {
			position36, tokenIndex36 := position, tokenIndex
			{
				position37 := position
				{
					position38, tokenIndex38 := position, tokenIndex
					if !_rules[ruleDOLLAR]() {
						goto l38
					}
					if !_rules[ruleDOT]() {
						goto l38
					}
					goto l39
				l38:
					position, tokenIndex = position38, tokenIndex38
				}
			l39:
				if !_rules[ruleIdentifier]() {
					goto l36
				}
				if !_rules[ruleAction0]() {
					goto l36
				}
				add(ruleRootField, position37)
			}
			return true
		l36:
			position, tokenIndex = position36, tokenIndex36
			return false
		},
		/* 8 RootIndex <- <((DOLLAR DOT)? Integer Action1)> */
		func() bool {
			position40, tokenIndex40 := position, tokenIndex
			{
				position41 := position
				{
					position42, tokenIndex42 := position, tokenIndex
					if !_rules[ruleDOLLAR]() {
						goto l42
					}
					if !_rules[ruleDOT]() {
						goto l42
					}
					goto l43
				l42:
					position, tokenIndex = position42, tokenIndex42
				}
			l43:
				if !_rules[ruleInteger]() {
					goto l40
				}
				if !_rules[ruleAction1]() {
					goto l40
				}
				add(ruleRootIndex, position41)
			}
			return true
		l40:
			position, tokenIndex = position40, tokenIndex40
			return false
		},
		/* 9 BracketedRootIndex <- <(DOLLAR LBRACKET Integer RBRACKET Action2)> */
		func() bool {
			position44, tokenIndex44 := position, tokenIndex
			{
				position45 := position
				if !_rules[ruleDOLLAR]() {
					goto l44
				}
				if !_rules[ruleLBRACKET]() {
					goto l44
				}
				if !_rules[ruleInteger]() {
					goto l44
				}
				if !_rules[ruleRBRACKET]() {
					goto l44
				}
				if !_rules[ruleAction2]() {
					goto l44
				}
				add(ruleBracketedRootIndex, position45)
			}
			return true
		l44:
			position, tokenIndex = position44, tokenIndex44
			return false
		},
		/* 10 BracketedRootField <- <(DOLLAR LBRACKET StringLiteral RBRACKET Action3)> */
		func() bool {
			position46, tokenIndex46 := position, tokenIndex
			{
				position47 := position
				if !_rules[ruleDOLLAR]() {
					goto l46
				}
				if !_rules[ruleLBRACKET]() {
					goto l46
				}
				if !_rules[ruleStringLiteral]() {
					goto l46
				}
				if !_rules[ruleRBRACKET]() {
					goto l46
				}
				if !_rules[ruleAction3]() {
					goto l46
				}
				add(ruleBracketedRootField, position47)
			}
			return true
		l46:
			position, tokenIndex = position46, tokenIndex46
			return false
		},
		/* 11 FieldAccess <- <(DOT Identifier Action4)> */
		func() bool {
			position48, tokenIndex48 := position, tokenIndex
			{
				position49 := position
				if !_rules[ruleDOT]() {
					goto l48
				}
				if !_rules[ruleIdentifier]() {
					goto l48
				}
				if !_rules[ruleAction4]() {
					goto l48
				}
				add(ruleFieldAccess, position49)
			}
			return true
		l48:
			position, tokenIndex = position48, tokenIndex48
			return false
		},
		/* 12 BracketedFieldAccess <- <(LBRACKET StringLiteral RBRACKET Action5)> */
		func() bool {
			position50, tokenIndex50 := position, tokenIndex
			{
				position51 := position
				if !_rules[ruleLBRACKET]() {
					goto l50
				}
				if !_rules[ruleStringLiteral]() {
					goto l50
				}
				if !_rules[ruleRBRACKET]() {
					goto l50
				}
				if !_rules[ruleAction5]() {
					goto l50
				}
				add(ruleBracketedFieldAccess, position51)
			}
			return true
		l50:
			position, tokenIndex = position50, tokenIndex50
			return false
		},
		/* 13 BracketedIndexAccess <- <(LBRACKET Integer RBRACKET Action6)> */
		func() bool {
			position52, tokenIndex52 := position, tokenIndex
			{
				position53 := position
				if !_rules[ruleLBRACKET]() {
					goto l52
				}
				if !_rules[ruleInteger]() {
					goto l52
				}
				if !_rules[ruleRBRACKET]() {
					goto l52
				}
				if !_rules[ruleAction6]() {
					goto l52
				}
				add(ruleBracketedIndexAccess, position53)
			}
			return true
		l52:
			position, tokenIndex = position52, tokenIndex52
			return false
		},
		/* 14 IndexAccess <- <(DOT Integer Action7)> */
		func() bool {
			position54, tokenIndex54 := position, tokenIndex
			{
				position55 := position
				if !_rules[ruleDOT]() {
					goto l54
				}
				if !_rules[ruleInteger]() {
					goto l54
				}
				if !_rules[ruleAction7]() {
					goto l54
				}
				add(ruleIndexAccess, position55)
			}
			return true
		l54:
			position, tokenIndex = position54, tokenIndex54
			return false
		},
		/* 15 DOT <- <'.'> */
		func() bool {
			position56, tokenIndex56 := position, tokenIndex
			{
				position57 := position
				if buffer[position] != rune('.') {
					goto l56
				}
				position++
				add(ruleDOT, position57)
			}
			return true
		l56:
			position, tokenIndex = position56, tokenIndex56
			return false
		},
		/* 16 LBRACKET <- <'['> */
		func() bool {
			position58, tokenIndex58 := position, tokenIndex
			{
				position59 := position
				if buffer[position] != rune('[') {
					goto l58
				}
				position++
				add(ruleLBRACKET, position59)
			}
			return true
		l58:
			position, tokenIndex = position58, tokenIndex58
			return false
		},
		/* 17 RBRACKET <- <']'> */
		func() bool {
			position60, tokenIndex60 := position, tokenIndex
			{
				position61 := position
				if buffer[position] != rune(']') {
					goto l60
				}
				position++
				add(ruleRBRACKET, position61)
			}
			return true
		l60:
			position, tokenIndex = position60, tokenIndex60
			return false
		},
		/* 18 DOLLAR <- <'$'> */
		func() bool {
			position62, tokenIndex62 := position, tokenIndex
			{
				position63 := position
				if buffer[position] != rune('$') {
					goto l62
				}
				position++
				add(ruleDOLLAR, position63)
			}
			return true
		l62:
			position, tokenIndex = position62, tokenIndex62
			return false
		},
		/* 19 PIPE <- <'|'> */
		func() bool {
			position64, tokenIndex64 := position, tokenIndex
			{
				position65 := position
				if buffer[position] != rune('|') {
					goto l64
				}
				position++
				add(rulePIPE, position65)
			}
			return true
		l64:
			position, tokenIndex = position64, tokenIndex64
			return false
		},
		/* 20 COMMA <- <','> */
		func() bool {
			position66, tokenIndex66 := position, tokenIndex
			{
				position67 := position
				if buffer[position] != rune(',') {
					goto l66
				}
				position++
				add(ruleCOMMA, position67)
			}
			return true
		l66:
			position, tokenIndex = position66, tokenIndex66
			return false
		},
		/* 21 DQUOTE <- <'"'> */
		func() bool {
			position68, tokenIndex68 := position, tokenIndex
			{
				position69 := position
				if buffer[position] != rune('"') {
					goto l68
				}
				position++
				add(ruleDQUOTE, position69)
			}
			return true
		l68:
			position, tokenIndex = position68, tokenIndex68
			return false
		},
		/* 22 BACKSLASH <- <'\\'> */
		func() bool {
			position70, tokenIndex70 := position, tokenIndex
			{
				position71 := position
				if buffer[position] != rune('\\') {
					goto l70
				}
				position++
				add(ruleBACKSLASH, position71)
			}
			return true
		l70:
			position, tokenIndex = position70, tokenIndex70
			return false
		},
		/* 23 StringLiteral <- <(<(DQUOTE StringChar* DQUOTE)> Action8)> */
		func() bool {
			position72, tokenIndex72 := position, tokenIndex
			{
				position73 := position
				{
					position74 := position
					if !_rules[ruleDQUOTE]() {
						goto l72
					}
				l75:
					{
						position76, tokenIndex76 := position, tokenIndex
						if !_rules[ruleStringChar]() {
							goto l76
						}
						goto l75
					l76:
						position, tokenIndex = position76, tokenIndex76
					}
					if !_rules[ruleDQUOTE]() {
						goto l72
					}
					add(rulePegText, position74)
				}
				if !_rules[ruleAction8]() {
					goto l72
				}
				add(ruleStringLiteral, position73)
			}
			return true
		l72:
			position, tokenIndex = position72, tokenIndex72
			return false
		},
		/* 24 StringChar <- <(Escape / (!('"' / '\n' / '\\') .))> */
		func() bool {
			position77, tokenIndex77 := position, tokenIndex
			{
				position78 := position
				{
					position79, tokenIndex79 := position, tokenIndex
					if !_rules[ruleEscape]() {
						goto l80
					}
					goto l79
				l80:
					position, tokenIndex = position79, tokenIndex79
					{
						position81, tokenIndex81 := position, tokenIndex
						{
							position82, tokenIndex82 := position, tokenIndex
							if buffer[position] != rune('"') {
								goto l83
							}
							position++
							goto l82
						l83:
							position, tokenIndex = position82, tokenIndex82
							if buffer[position] != rune('\n') {
								goto l84
							}
							position++
							goto l82
						l84:
							position, tokenIndex = position82, tokenIndex82
							if buffer[position] != rune('\\') {
								goto l81
							}
							position++
						}
					l82:
						goto l77
					l81:
						position, tokenIndex = position81, tokenIndex81
					}
					if !matchDot() {
						goto l77
					}
				}
			l79:
				add(ruleStringChar, position78)
			}
			return true
		l77:
			position, tokenIndex = position77, tokenIndex77
			return false
		},
		/* 25 Escape <- <(BACKSLASH ('"' / '\n' / '\\'))> */
		func() bool {
			position85, tokenIndex85 := position, tokenIndex
			{
				position86 := position
				if !_rules[ruleBACKSLASH]() {
					goto l85
				}
				{
					position87, tokenIndex87 := position, tokenIndex
					if buffer[position] != rune('"') {
						goto l88
					}
					position++
					goto l87
				l88:
					position, tokenIndex = position87, tokenIndex87
					if buffer[position] != rune('\n') {
						goto l89
					}
					position++
					goto l87
				l89:
					position, tokenIndex = position87, tokenIndex87
					if buffer[position] != rune('\\') {
						goto l85
					}
					position++
				}
			l87:
				add(ruleEscape, position86)
			}
			return true
		l85:
			position, tokenIndex = position85, tokenIndex85
			return false
		},
		/* 26 Integer <- <(<('0' / ([1-9] [0-9]*))> Action9)> */
		func() bool {
			position90, tokenIndex90 := position, tokenIndex
			{
				position91 := position
				{
					position92 := position
					{
						position93, tokenIndex93 := position, tokenIndex
						if buffer[position] != rune('0') {
							goto l94
						}
						position++
						goto l93
					l94:
						position, tokenIndex = position93, tokenIndex93
						if c := buffer[position]; c < rune('1') || c > rune('9') {
							goto l90
						}
						position++
					l95:
						{
							position96, tokenIndex96 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l96
							}
							position++
							goto l95
						l96:
							position, tokenIndex = position96, tokenIndex96
						}
					}
				l93:
					add(rulePegText, position92)
				}
				if !_rules[ruleAction9]() {
					goto l90
				}
				add(ruleInteger, position91)
			}
			return true
		l90:
			position, tokenIndex = position90, tokenIndex90
			return false
		},
		/* 27 Identifier <- <(<(IdentifierInitialChar IdentifierContinuedChar*)> Action10)> */
		func() bool {
			position97, tokenIndex97 := position, tokenIndex
			{
				position98 := position
				{
					position99 := position
					if !_rules[ruleIdentifierInitialChar]() {
						goto l97
					}
				l100:
					{
						position101, tokenIndex101 := position, tokenIndex
						if !_rules[ruleIdentifierContinuedChar]() {
							goto l101
						}
						goto l100
					l101:
						position, tokenIndex = position101, tokenIndex101
					}
					add(rulePegText, position99)
				}
				if !_rules[ruleAction10]() {
					goto l97
				}
				add(ruleIdentifier, position98)
			}
			return true
		l97:
			position, tokenIndex = position97, tokenIndex97
			return false
		},
		/* 28 IdentifierInitialChar <- <([a-z] / [A-Z])> */
		func() bool {
			position102, tokenIndex102 := position, tokenIndex
			{
				position103 := position
				{
					position104, tokenIndex104 := position, tokenIndex
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l105
					}
					position++
					goto l104
				l105:
					position, tokenIndex = position104, tokenIndex104
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l102
					}
					position++
				}
			l104:
				add(ruleIdentifierInitialChar, position103)
			}
			return true
		l102:
			position, tokenIndex = position102, tokenIndex102
			return false
		},
		/* 29 IdentifierContinuedChar <- <([a-z] / [A-Z] / '_' / [0-9])> */
		func() bool {
			position106, tokenIndex106 := position, tokenIndex
			{
				position107 := position
				{
					position108, tokenIndex108 := position, tokenIndex
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l109
					}
					position++
					goto l108
				l109:
					position, tokenIndex = position108, tokenIndex108
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l110
					}
					position++
					goto l108
				l110:
					position, tokenIndex = position108, tokenIndex108
					if buffer[position] != rune('_') {
						goto l111
					}
					position++
					goto l108
				l111:
					position, tokenIndex = position108, tokenIndex108
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l106
					}
					position++
				}
			l108:
				add(ruleIdentifierContinuedChar, position107)
			}
			return true
		l106:
			position, tokenIndex = position106, tokenIndex106
			return false
		},
		/* 30 Whitespace <- <('\t' / ' ')+> */
		func() bool {
			position112, tokenIndex112 := position, tokenIndex
			{
				position113 := position
				{
					position116, tokenIndex116 := position, tokenIndex
					if buffer[position] != rune('\t') {
						goto l117
					}
					position++
					goto l116
				l117:
					position, tokenIndex = position116, tokenIndex116
					if buffer[position] != rune(' ') {
						goto l112
					}
					position++
				}
			l116:
			l114:
				{
					position115, tokenIndex115 := position, tokenIndex
					{
						position118, tokenIndex118 := position, tokenIndex
						if buffer[position] != rune('\t') {
							goto l119
						}
						position++
						goto l118
					l119:
						position, tokenIndex = position118, tokenIndex118
						if buffer[position] != rune(' ') {
							goto l115
						}
						position++
					}
				l118:
					goto l114
				l115:
					position, tokenIndex = position115, tokenIndex115
				}
				add(ruleWhitespace, position113)
			}
			return true
		l112:
			position, tokenIndex = position112, tokenIndex112
			return false
		},
		/* 31 END <- <!.> */
		func() bool {
			position120, tokenIndex120 := position, tokenIndex
			{
				position121 := position
				{
					position122, tokenIndex122 := position, tokenIndex
					if !matchDot() {
						goto l122
					}
					goto l120
				l122:
					position, tokenIndex = position122, tokenIndex122
				}
				add(ruleEND, position121)
			}
			return true
		l120:
			position, tokenIndex = position120, tokenIndex120
			return false
		},
		/* 33 Action0 <- <{
		  p.expression.addKey(p.identifier)
		}> */
		func() bool {
			{
				add(ruleAction0, position)
			}
			return true
		},
		/* 34 Action1 <- <{
		  p.expression.addIndex(p.integer)
		}> */
		func() bool {
			{
				add(ruleAction1, position)
			}
			return true
		},
		/* 35 Action2 <- <{
		  p.expression.addIndex(p.integer)
		}> */
		func() bool {
			{
				add(ruleAction2, position)
			}
			return true
		},
		/* 36 Action3 <- <{
		  p.expression.addKey(p.stringLiteral)
		}> */
		func() bool {
			{
				add(ruleAction3, position)
			}
			return true
		},
		/* 37 Action4 <- <{
		  p.expression.addKey(p.identifier)
		}> */
		func() bool {
			{
				add(ruleAction4, position)
			}
			return true
		},
		/* 38 Action5 <- <{
		  p.expression.addKey(p.stringLiteral)
		}> */
		func() bool {
			{
				add(ruleAction5, position)
			}
			return true
		},
		/* 39 Action6 <- <{
		  p.expression.addIndex(p.integer)
		}> */
		func() bool {
			{
				add(ruleAction6, position)
			}
			return true
		},
		/* 40 Action7 <- <{
		  p.expression.addIndex(p.integer)
		}> */
		func() bool {
			{
				add(ruleAction7, position)
			}
			return true
		},
		nil,
		/* 42 Action8 <- <{
		  s, _ := strconv.Unquote(text)
		  p.stringLiteral = s
		}> */
		func() bool {
			{
				add(ruleAction8, position)
			}
			return true
		},
		/* 43 Action9 <- <{
		  n, _ := strconv.Atoi(text)
		  p.integer = n
		}> */
		func() bool {
			{
				add(ruleAction9, position)
			}
			return true
		},
		/* 44 Action10 <- <{
		  p.identifier = text
		}> */
		func() bool {
			{
				add(ruleAction10, position)
			}
			return true
		},
	}
	p.rules = _rules
	return nil
}
